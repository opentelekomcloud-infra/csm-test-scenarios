---
- name: Prepare controller variables
  import_playbook: prepare_variables.yaml
  vars:
    scenario_name: >
      csm_controller
      as_monitoring

- name: Prepare variables
  hosts: localhost
  vars_files:
    - ./vars/csm_controller.yaml
    - ./vars/as_monitoring.yaml
  tasks:
    - name: Register hosts
      add_host:
        name: as_host
        ansible_host: "{{ as_monitoring.as_instance_ip }}"
        ansible_ssh_user: linux
        ansible_ssh_private_key_file: "{{ csm_controller.controller_key }}"
        ansible_ssh_common_args: >
          -o UserKnownHostsFile=/dev/null
          -o ProxyCommand='ssh -W %h:%p
          -q linux@{{ csm_controller.csm_controller_fip }}
          -i {{ csm_controller.controller_key }}
          -o StrictHostKeyChecking=no
          -o UserKnownHostsFile=/dev/null'
          -o PasswordAuthentication=no

- name: Start test
  hosts: as_host
  become: yes
  vars_files:
    - ./vars/as_monitoring.yaml
  vars:
    lb: "{{ as_monitoring.lb_instance_ip }}"
    nohup: nohup /usr/bin/python3 -m csm_test_utils
    tlg: http://localhost:8080
  tasks:
    - name: Get reporting processes list from remote host  # noqa 301 305
      ignore_errors: yes
      shell: "ps aux | grep 'cpu_load' | awk '{print $2}'"
      register: process_monitor

    - name: Kill running reporting processes  # noqa 301 305
      ignore_errors: yes
      shell: "kill {{ process_monitor.stdout_lines[0] }}"

    - name: Kill running lookbusy processes  # noqa 301 305
      ignore_errors: yes
      shell: pkill lookbusy

    - name: Waiting for status
      wait_for:
        path: "/proc/{{ process_monitor.stdout_lines[0] }}/status"
        state: absent
      ignore_errors: yes

    - name: Run load generation script  # noqa 301 305
      shell: >
        start-stop-daemon -Sbmvp /tmp/cpu_load.pid -x /usr/bin/python3
        /tmp/cpu_load.py -- --source /tmp/load_levels.dat --interval 60 --ncpus 2

    - name: Start monitoring server and loadbalancer  # noqa 301 305
      shell: "{{ nohup }} {{ item }} --telegraf {{ tlg }} --target {{ lb }} &"
      loop:
        - as_monitor
        - as_load
