---
- name: Prepare key and variables for scenario
  hosts: localhost
  environment:
    OS_CLOUD: "{{ lookup('env', 'CSM_CLOUD') | default('csm', True) }}"
  tasks:
    - name: Obtain key for connection
      swift_client:
        state: "{{ swift_operation }}"
        container: "{{ swift_container }}"
        object_name: machine_key
      register: key

    - name: Save key for connection
      copy:
        content: "{{ key.object.content }}"
        dest: "{{ key_path }}/csm_key"
        mode: 0600

    - name: Get watchers
      swift_client:
        state: "{{ swift_operation }}"
        container: "{{ swift_container }}"
        object_name: infra_eips
      register: wtcr

    - name: Register watchers ips
      set_fact:
        watchers_eips: "{{ (wtcr.object.content | from_yaml).watchers_eips | replace('-','_') }}"

    - name: Register VPC_B watcher
      add_host:
        name: vpc_b_watcher
        groups: watchers
        ansible_host: "{{ watchers_eips.watcher_eu_de_01_vpc_b }}"
        ansible_ssh_user: linux
        ansible_ssh_private_key_file: "{{ key_path }}/csm_key"

    - name: Nodes List
      set_fact:
        nodes: [
          {ip: 192.168.200.10, name: instance_1_eu-de-01},
          {ip: 192.168.200.11, name: instance_2_eu-de-01},
          {ip: 192.168.200.12, name: instance_3_eu-de-01},
          {ip: 192.168.200.13, name: instance_1_eu-de-02},
          {ip: 192.168.200.14, name: instance_2_eu-de-02},
          {ip: 192.168.200.15, name: instance_3_eu-de-02},
          {ip: 192.168.200.16, name: instance_1_eu-de-03},
          {ip: 192.168.200.17, name: instance_2_eu-de-03},
          {ip: 192.168.200.18, name: instance_3_eu-de-03}]

- name: Ping hosts, normal packets
  hosts: vpc_b_watcher
  vars:
    metric_name: csm_peering_ping.64
  tasks:
    - name: Measure latency
      script: >
        ping.py --metric_name "{{ metric_name }}"
        --hosts "{{ hostvars.localhost.nodes }}"
      args:
        executable: "/usr/bin/python3"
      register: serialized_metrics

    - name: Register metrics
      set_fact:
        metrics: "{{ serialized_metrics.stdout }}"

- name: Send metrics to graphite
  hosts: localhost
  tasks:
    - name: Send metrics
      script: >
        send_metrics.py "{{ hostvars.vpc_b_watcher.metrics }}"
      args:
        executable: "/usr/bin/python3"

- name: Ping hosts, large packets 1500
  hosts: vpc_b_watcher
  vars:
    metric_name: csm_peering_ping.1500
  tasks:
    - name: Measure latency
      script: >
        ping.py --metric_name "{{ metric_name }}"
        --hosts "{{ hostvars.localhost.nodes }}"
        --packet_size 1492
      args:
        executable: "/usr/bin/python3"
      register: large_serialized_metrics

    - name: Register metrics
      set_fact:
        large_metrics: "{{ large_serialized_metrics.stdout }}"

- name: Send metrics to graphite
  hosts: localhost
  tasks:
    - name: Send metrics
      script: >
        send_metrics.py "{{ hostvars.vpc_b_watcher.large_metrics }}"
      args:
        executable: "/usr/bin/python3"
